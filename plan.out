module.infra.data.terraform_remote_state.vpc: Reading...
data.aws_caller_identity.current: Reading...
aws_dynamodb_table.terraform_state_lock: Refreshing state... [id=ecs-experiments-tfstate-cc635-dynamodb]
module.infra.aws_ecs_cluster.ecs1: Refreshing state... [id=arn:aws:ecs:eu-north-1:867344461909:cluster/ECS1]
module.infra.aws_ecr_repository.nginx_ecr_repo: Refreshing state... [id=nginx]
module.infra.aws_iam_role.ecs_task_execution_role: Refreshing state... [id=ecsTaskExecutionRole]
module.infra.module.ecs_vpc.aws_vpc.this[0]: Refreshing state... [id=vpc-0e39c31ade5255655]
data.aws_caller_identity.current: Read complete after 0s [id=867344461909]
module.infra.data.terraform_remote_state.vpc: Read complete after 1s
module.infra.aws_iam_role_policy_attachment.ecs_task_execution_role: Refreshing state... [id=ecsTaskExecutionRole-20241220125703524400000001]
module.infra.module.ecs_vpc.aws_default_security_group.this[0]: Refreshing state... [id=sg-01ef5f3ad4f7ce682]
module.infra.module.ecs_vpc.aws_default_route_table.default[0]: Refreshing state... [id=rtb-05820ec54dde76e0a]
module.infra.module.ecs_vpc.aws_default_network_acl.this[0]: Refreshing state... [id=acl-036f9abdfe0843bf7]
module.infra.module.ecs_vpc.aws_route_table.public[0]: Refreshing state... [id=rtb-0c8d16ef769bff989]
module.infra.module.ecs_vpc.aws_subnet.private[0]: Refreshing state... [id=subnet-0d290e5042e68e05a]
module.infra.module.ecs_vpc.aws_subnet.private[1]: Refreshing state... [id=subnet-0423daa704a250d83]
module.infra.module.ecs_vpc.aws_subnet.public[0]: Refreshing state... [id=subnet-0b21f848fd2854b47]
module.infra.module.ecs_vpc.aws_subnet.public[1]: Refreshing state... [id=subnet-0098fd1ebcd877704]
module.infra.module.ecs_vpc.aws_internet_gateway.this[0]: Refreshing state... [id=igw-04abf98c742b49440]
module.infra.module.ecs_vpc.aws_route_table.private[1]: Refreshing state... [id=rtb-048267967ebecc2f7]
module.infra.module.ecs_vpc.aws_route_table.private[0]: Refreshing state... [id=rtb-0d829bbbd04a98c8d]
module.infra.module.ecs_vpc.aws_route_table_association.public[1]: Refreshing state... [id=rtbassoc-02fae37ff32903a5b]
module.infra.module.ecs_vpc.aws_route_table_association.public[0]: Refreshing state... [id=rtbassoc-085365aad5ec5200f]
module.infra.module.ecs_vpc.aws_route.public_internet_gateway[0]: Refreshing state... [id=r-rtb-0c8d16ef769bff9891080289494]
module.infra.module.ecs_vpc.aws_route_table_association.private[0]: Refreshing state... [id=rtbassoc-03d30fba6fb2f1a9c]
module.infra.module.ecs_vpc.aws_route_table_association.private[1]: Refreshing state... [id=rtbassoc-0aac6106f1a72327a]
module.service_nginx_fargate1[0].data.terraform_remote_state.vpc: Reading...
module.service_nginx_fargate1[0].data.terraform_remote_state.vpc: Read complete after 1s

Terraform used the selected providers to generate the following execution
plan. Resource actions are indicated with the following symbols:
  + create

Terraform will perform the following actions:

  # module.service_nginx_fargate1[0].aws_ecs_service.nginx will be created
  + resource "aws_ecs_service" "nginx" {
      + availability_zone_rebalancing      = "DISABLED"
      + cluster                            = "arn:aws:ecs:eu-north-1:867344461909:cluster/ECS1"
      + deployment_maximum_percent         = 200
      + deployment_minimum_healthy_percent = 100
      + desired_count                      = 2
      + enable_ecs_managed_tags            = false
      + enable_execute_command             = false
      + iam_role                           = (known after apply)
      + id                                 = (known after apply)
      + launch_type                        = "FARGATE"
      + name                               = "nginx-service"
      + platform_version                   = (known after apply)
      + scheduling_strategy                = "REPLICA"
      + tags_all                           = (known after apply)
      + task_definition                    = (known after apply)
      + triggers                           = (known after apply)
      + wait_for_steady_state              = false

      + load_balancer {
          + container_name   = "nginx"
          + container_port   = 80
          + target_group_arn = (known after apply)
            # (1 unchanged attribute hidden)
        }

      + network_configuration {
          + assign_public_ip = true
          + security_groups  = (known after apply)
          + subnets          = [
              + "subnet-0098fd1ebcd877704",
              + "subnet-0b21f848fd2854b47",
            ]
        }
    }

  # module.service_nginx_fargate1[0].aws_ecs_task_definition.nginx will be created
  + resource "aws_ecs_task_definition" "nginx" {
      + arn                      = (known after apply)
      + arn_without_revision     = (known after apply)
      + container_definitions    = jsonencode(
            [
              + {
                  + image        = "867344461909.dkr.ecr.eu-north-1.amazonaws.com/nginx:latest"
                  + name         = "nginx"
                  + portMappings = [
                      + {
                          + containerPort = 80
                          + hostPort      = 80
                        },
                    ]
                },
            ]
        )
      + cpu                      = "256"
      + execution_role_arn       = "arn:aws:iam::867344461909:role/ecsTaskExecutionRole"
      + family                   = "nginx-service"
      + id                       = (known after apply)
      + memory                   = "512"
      + network_mode             = "awsvpc"
      + requires_compatibilities = [
          + "FARGATE",
        ]
      + revision                 = (known after apply)
      + skip_destroy             = false
      + tags_all                 = (known after apply)
      + track_latest             = false
    }

  # module.service_nginx_fargate1[0].aws_lb.nginx will be created
  + resource "aws_lb" "nginx" {
      + arn                                                          = (known after apply)
      + arn_suffix                                                   = (known after apply)
      + client_keep_alive                                            = 3600
      + desync_mitigation_mode                                       = "defensive"
      + dns_name                                                     = (known after apply)
      + drop_invalid_header_fields                                   = false
      + enable_deletion_protection                                   = false
      + enable_http2                                                 = true
      + enable_tls_version_and_cipher_suite_headers                  = false
      + enable_waf_fail_open                                         = false
      + enable_xff_client_port                                       = false
      + enforce_security_group_inbound_rules_on_private_link_traffic = (known after apply)
      + id                                                           = (known after apply)
      + idle_timeout                                                 = 60
      + internal                                                     = false
      + ip_address_type                                              = (known after apply)
      + load_balancer_type                                           = "application"
      + name                                                         = "nginx-lb"
      + name_prefix                                                  = (known after apply)
      + preserve_host_header                                         = false
      + security_groups                                              = (known after apply)
      + subnets                                                      = [
          + "subnet-0098fd1ebcd877704",
          + "subnet-0b21f848fd2854b47",
        ]
      + tags_all                                                     = (known after apply)
      + vpc_id                                                       = (known after apply)
      + xff_header_processing_mode                                   = "append"
      + zone_id                                                      = (known after apply)

      + subnet_mapping (known after apply)
    }

  # module.service_nginx_fargate1[0].aws_lb_listener.front_end will be created
  + resource "aws_lb_listener" "front_end" {
      + arn                      = (known after apply)
      + id                       = (known after apply)
      + load_balancer_arn        = (known after apply)
      + port                     = 80
      + protocol                 = "HTTP"
      + ssl_policy               = (known after apply)
      + tags_all                 = (known after apply)
      + tcp_idle_timeout_seconds = (known after apply)

      + default_action {
          + order            = (known after apply)
          + target_group_arn = (known after apply)
          + type             = "forward"
        }

      + mutual_authentication (known after apply)
    }

  # module.service_nginx_fargate1[0].aws_lb_target_group.nginx will be created
  + resource "aws_lb_target_group" "nginx" {
      + arn                                = (known after apply)
      + arn_suffix                         = (known after apply)
      + connection_termination             = (known after apply)
      + deregistration_delay               = "300"
      + id                                 = (known after apply)
      + ip_address_type                    = (known after apply)
      + lambda_multi_value_headers_enabled = false
      + load_balancer_arns                 = (known after apply)
      + load_balancing_algorithm_type      = (known after apply)
      + load_balancing_anomaly_mitigation  = (known after apply)
      + load_balancing_cross_zone_enabled  = (known after apply)
      + name                               = "nginx-tg"
      + name_prefix                        = (known after apply)
      + port                               = 80
      + preserve_client_ip                 = (known after apply)
      + protocol                           = "HTTP"
      + protocol_version                   = (known after apply)
      + proxy_protocol_v2                  = false
      + slow_start                         = 0
      + tags_all                           = (known after apply)
      + target_type                        = "ip"
      + vpc_id                             = "vpc-0e39c31ade5255655"

      + health_check (known after apply)

      + stickiness (known after apply)

      + target_failover (known after apply)

      + target_group_health (known after apply)

      + target_health_state (known after apply)
    }

  # module.service_nginx_fargate1[0].aws_security_group.ecs_tasks will be created
  + resource "aws_security_group" "ecs_tasks" {
      + arn                    = (known after apply)
      + description            = "Allow inbound access from the ALB only"
      + egress                 = (known after apply)
      + id                     = (known after apply)
      + ingress                = (known after apply)
      + name                   = "nginx-tasks-sg"
      + name_prefix            = (known after apply)
      + owner_id               = (known after apply)
      + revoke_rules_on_delete = false
      + tags_all               = (known after apply)
      + vpc_id                 = "vpc-0e39c31ade5255655"
    }

  # module.service_nginx_fargate1[0].aws_security_group.lb will be created
  + resource "aws_security_group" "lb" {
      + arn                    = (known after apply)
      + description            = "controls access to the ALB"
      + egress                 = (known after apply)
      + id                     = (known after apply)
      + ingress                = (known after apply)
      + name                   = "nginx-lb-sg"
      + name_prefix            = (known after apply)
      + owner_id               = (known after apply)
      + revoke_rules_on_delete = false
      + tags_all               = (known after apply)
      + vpc_id                 = "vpc-0e39c31ade5255655"
    }

  # module.service_nginx_fargate1[0].aws_vpc_security_group_egress_rule.allow_all_ipv4_ecs_tasks will be created
  + resource "aws_vpc_security_group_egress_rule" "allow_all_ipv4_ecs_tasks" {
      + arn                    = (known after apply)
      + cidr_ipv4              = "0.0.0.0/0"
      + id                     = (known after apply)
      + ip_protocol            = "-1"
      + security_group_id      = (known after apply)
      + security_group_rule_id = (known after apply)
      + tags_all               = {}
    }

  # module.service_nginx_fargate1[0].aws_vpc_security_group_egress_rule.allow_all_ipv4_lb will be created
  + resource "aws_vpc_security_group_egress_rule" "allow_all_ipv4_lb" {
      + arn                    = (known after apply)
      + cidr_ipv4              = "0.0.0.0/0"
      + id                     = (known after apply)
      + ip_protocol            = "-1"
      + security_group_id      = (known after apply)
      + security_group_rule_id = (known after apply)
      + tags_all               = {}
    }

  # module.service_nginx_fargate1[0].aws_vpc_security_group_ingress_rule.tcp80_ecs_tasks will be created
  + resource "aws_vpc_security_group_ingress_rule" "tcp80_ecs_tasks" {
      + arn                          = (known after apply)
      + from_port                    = 80
      + id                           = (known after apply)
      + ip_protocol                  = "tcp"
      + referenced_security_group_id = (known after apply)
      + security_group_id            = (known after apply)
      + security_group_rule_id       = (known after apply)
      + tags_all                     = {}
      + to_port                      = 80
    }

  # module.service_nginx_fargate1[0].aws_vpc_security_group_ingress_rule.tcp80_lb will be created
  + resource "aws_vpc_security_group_ingress_rule" "tcp80_lb" {
      + arn                    = (known after apply)
      + cidr_ipv4              = "0.0.0.0/0"
      + from_port              = 80
      + id                     = (known after apply)
      + ip_protocol            = "tcp"
      + security_group_id      = (known after apply)
      + security_group_rule_id = (known after apply)
      + tags_all               = {}
      + to_port                = 80
    }

Plan: 11 to add, 0 to change, 0 to destroy.

─────────────────────────────────────────────────────────────────────────────

Saved the plan to: plan.bin

To perform exactly these actions, run the following command to apply:
    terraform apply "plan.bin"
